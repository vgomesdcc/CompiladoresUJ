#include <iostream>
#include <stack>
#include <string>
#include <sstream>
#include <cctype>

bool isOperador(char token) {
    return token == '+' || token == '-' || token == '*' || token == '/';
}

int obterPrioridade(char operador) {
    if (operador == '+' || operador == '-') {
        return 1;
    } else if (operador == '*' || operador == '/') {
        return 2;
    }
    return 0;
}

double calcular(double num1, double num2, char operador) {
    switch (operador) {
        case '+':
            return num1 + num2;
        case '-':
            return num1 - num2;
        case '*':
            return num1 * num2;
        case '/':
            if (num2 != 0) {
                return num1 / num2;
            } else {
                std::cerr << "Erro: Divisão por zero." << std::endl;
                exit(1);
            }
    }
    return 0.0;
}

std::string converterParaPosFixa(const std::string& expressao) {
    std::stack<char> operadores;
    std::stringstream posFixa;

    for (char token : expressao) {
        if (std::isalnum(token) || token == '.') {
            posFixa << token;
        } else if (token == '(') {
            operadores.push(token);
        } else if (token == ')') {
            while (!operadores.empty() && operadores.top() != '(') {
                posFixa << ' ' << operadores.top();
                operadores.pop();
            }
            operadores.pop(); // Remover '(' da pilha
        } else if (isOperador(token)) {
            while (!operadores.empty() && obterPrioridade(operadores.top()) >= obterPrioridade(token)) {
                posFixa << ' ' << operadores.top();
                operadores.pop();
            }
            posFixa << ' ';
            operadores.push(token);
        }
    }

    while (!operadores.empty()) {
        posFixa << ' ' << operadores.top();
        operadores.pop();
    }

    return posFixa.str();
}

double calcularPosFixa(const std::string& posFixa) {
    std::stack<double> pilha;
    std::istringstream stream(posFixa);
    std::string token;

    while (stream >> token) {
        if (std::isalnum(token[0])) {
            double numero = std::stod(token);
            pilha.push(numero);
        } else if (isOperador(token[0])) {
            if (pilha.size() < 2) {
                std::cerr << "Erro: Expressão inválida." << std::endl;
                exit(1);
            }
            double num2 = pilha.top();
            pilha.pop();
            double num1 = pilha.top();
            pilha.pop();
            double resultado = calcular(num1, num2, token[0]);
            pilha.push(resultado);
        }
    }

    if (pilha.size() != 1) {
        std::cerr << "Erro: Expressão inválida." << std::endl;
        exit(1);
    }

    return pilha.top();
}

double calcularExpressaoInfixa(const std::string& expressao) {
    std::stack<double> numeros;
    std::stack<char> operadores;

    for (char token : expressao) {
        if (std::isdigit(token) || token == '.') {
            double numero;
            std::cin.putback(token);
            std::cin >> numero;
            numeros.push(numero);
        } else if (token == '(') {
            operadores.push(token);
        } else if (token == ')') {
            while (!operadores.empty() && operadores.top() != '(') {
                char operador = operadores.top();
                operadores.pop();
                if (numeros.size() < 2) {
                    std::cerr << "Erro: Expressão inválida." << std::endl;
                    exit(1);
                }
                double num2 = numeros.top();
                numeros.pop();
                double num1 = numeros.top();
                numeros.pop();
                double resultado = calcular(num1, num2, operador);
                numeros.push(resultado);
            }
            operadores.pop(); // Remover '(' da pilha
        } else if (isOperador(token)) {
            while (!operadores.empty() && obterPrioridade(operadores.top()) >= obterPrioridade(token)) {
                char operador = operadores.top();
                operadores.pop();
                if (numeros.size() < 2) {
                    std::cerr << "Erro: Expressão inválida." << std::endl;
                    exit(1);
                }
                double num2 = numeros.top();
                numeros.pop();
                double num1 = numeros.top();
                numeros.pop();
                double resultado = calcular(num1, num2, operador);
                numeros.push(resultado);
            }
            operadores.push(token);
        }
    }

    while (!operadores.empty()) {
        char operador = operadores.top();
        operadores.pop();
        if (numeros.size() < 2) {
            std::cerr << "Erro: Expressão inválida." << std::endl;
            exit(1);
        }
        double num2 = numeros.top();
        numeros.pop();
        double num1 = numeros.top();
        numeros.pop();
        double resultado = calcular(num1, num2, operador);
        numeros.push(resultado);
    }

    if (numeros.size() != 1 || operadores.size() != 0) {
        std::cerr << "Erro: Expressão inválida." << std::endl;
        exit(1);
    }

    return numeros.top();
}

int main() {
    while (true) {
        std::cout << "Escolha a notação da expressão:" << std::endl;
        std::cout << "1. Infixa" << std::endl;
        std::cout << "2. Pré-fixa" << std::endl;
        std::cout << "3. Pós-fixa" << std::endl;
        std::cout << "4. Sair" << std::endl;
        std::cout << "Opção: ";
        
        int escolha;
        std::cin >> escolha;

        if (escolha == 4) {
            break;
        }

        std::cin.ignore(); // Limpar o caractere de nova linha após a escolha

        std::string expressao;
        double resultado;

        switch (escolha) {
            case 1:
                std::cout << "Digite a expressão infixa: ";
                std::getline(std::cin, expressao);
                resultado = calcularExpressaoInfixa(expressao);
                break;
            case 2:
                std::cout << "Digite a expressão pré-fixa: ";
                std::getline(std::cin, expressao);
                resultado = calcularPosFixa(expressao);
                break;
            case 3:
                std::cout << "Digite a expressão pós-fixa: ";
                std::getline(std::cin, expressao);
                resultado = calcularPosFixa(expressao);
                break;
            default:
                std::cerr << "Opção inválida." << std::endl;
                continue;
        }

        std::cout << "Resultado: " << resultado << std::endl;
    }

    return 0;
}
